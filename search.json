[{"path":"https://mwhalen18.github.io/sewage/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 sewage authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mwhalen18.github.io/sewage/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew Whalen. Author, maintainer, copyright holder.","code":""},{"path":"https://mwhalen18.github.io/sewage/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Whalen M (2023). sewage: Light-Weight Data Pipelining Tool. https://github.com/mwhalen18/sewage, https://mwhalen18.github.io/sewage/.","code":"@Manual{,   title = {sewage: A Light-Weight Data Pipelining Tool},   author = {Matthew Whalen},   year = {2023},   note = {https://github.com/mwhalen18/sewage, https://mwhalen18.github.io/sewage/}, }"},{"path":"https://mwhalen18.github.io/sewage/index.html","id":"sewage-","dir":"","previous_headings":"","what":"A Light-Weight Data Pipelining Tool","title":"A Light-Weight Data Pipelining Tool","text":"goal sewage provide light-weight pipelining interface data analyses. Rather construct long scripts intermiediate datasets processes, can construct single pipeline run single call.","code":""},{"path":"https://mwhalen18.github.io/sewage/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Light-Weight Data Pipelining Tool","text":"download latest stable release , can install development version sewage Github:","code":"install.packages(\"sewage\") devtools::install_github(\"mwhalen18/sewage\")"},{"path":"https://mwhalen18.github.io/sewage/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"A Light-Weight Data Pipelining Tool","text":"example construct simple pipeline. can use function component pipeline, including custom functions define import external source. Currently, 3 components ready use: Nodes, Splitters, Joiners. Nodes take one object input return exactly one object. Splitters take exactly one object may return number outputs greater 1. Joiners take multiple objects return 1 object according method pass Joiner (components ). Note outputs Splitter accessible specifying name splitter component (case Splitter) suffixed outgoing edge format {name}.output_{}. first node pipeline specify argument passed pipeline execute (). can easily visualize pipeline using draw method.  execute pipeline run command. important note argument pass run match input argument first node pipeline. case passing file argument run similarly first node set receive file argument input. may choose argument name like, long two arguments match! can now access results terminating nodes. terminating node node specified input. default pipeline run, node overwrite output input node. Therefore node fed forward new node return output. case pipeline, Subsetter Summarizer edges terminating nodes. Therefore, can access results outputs object pipeline","code":"library(sewage) subset_data = function(x) {   subset(x, cyl == 6) } summarizer = function(x) {   return(summary(x[['disp']])) } pipeline = Pipeline() pipeline = pipeline |>   add_node(component = readr::read_csv, name = \"Reader\", input = \"file\", show_col_types = FALSE) |>   add_node(component = Splitter(), name = \"Splitter\", input = \"Reader\") |>   add_node(component = subset_data, name = \"Subsetter\", input = \"Splitter.output_2\") |>   add_node(component = summarizer, name = \"Summarizer\", input = \"Splitter.output_1\") pipeline #> ══ Pipeline ════════════════════════════════════════════════════════════════════ #> 4 node(s): #>  Reader <-- Input: file #>  #>  Splitter <-- Input: Reader #>  #>  Subsetter <-- Input: Splitter.output_2 #>  #>  Summarizer <-- Input: Splitter.output_1 draw(pipeline) result = run(pipeline, file = 'temp.csv') print(result) #> ══ Pipeline [executed] ═════════════════════════════════════════════════════════ #> 4 node(s): #>  Reader <-- Input: file #>  #>  Splitter <-- Input: Reader #>  #>  Subsetter <-- Input: Splitter.output_2 #>  #>  Summarizer <-- Input: Splitter.output_1 #>  #>  #> 2 output(s): #>  Subsetter #>  #>  Summarizer pull_output(result, \"Subsetter\") #> # A tibble: 7 × 11 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #> 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #> 3  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #> 4  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #> 5  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> 6  17.8     6  168.   123  3.92  3.44  18.9     1     0     4     4 #> 7  19.7     6  145    175  3.62  2.77  15.5     0     1     5     6 pull_output(result, \"Summarizer\") #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    71.1   120.8   196.3   230.7   326.0   472.0"},{"path":"https://mwhalen18.github.io/sewage/index.html","id":"multiple-entrypoints","dir":"","previous_headings":"","what":"Multiple Entrypoints","title":"A Light-Weight Data Pipelining Tool","text":"also possible pass multiple entrypoints specifying inputs arguments. allows process multiple documents bring together using Joiner later pipeline. Joiner take multiple inputs convert single output pipeline according function specified. component works nicely dplyr-like joins, restricted methods.","code":"library(dplyr) pipeline = Pipeline() pipeline = pipeline |>   add_node(read.csv, name = \"Reader\", input = \"file\") |>   add_node(subset_data, name = \"Subsetter\", input = \"data\") |>   add_node(Joiner(method = dplyr::bind_rows), name = \"Joiner\", input = c(\"Reader\", \"Subsetter\")) output = run(pipeline, file = \"temp.csv\", data = mtcars) draw(pipeline)"},{"path":"https://mwhalen18.github.io/sewage/index.html","id":"specifying-entrypoints","dir":"","previous_headings":"","what":"Specifying entrypoints","title":"A Light-Weight Data Pipelining Tool","text":"One benefits {sewage} can pick pipeline point using optional start halt options run. means can build entire data pipeline, test small sections. example, may want pass data one branch without running entire pipeline.  see pipeline stopped “Func3” node. Note still pass correct input name run command just first node pipeline. Sewage pipelines executed sequentially order specify pipeline. means everything starting node executed therefore must input runtime. information, see “Building Pipelines” vignette.","code":"pipeline = Pipeline() pipeline = pipeline |>   add_node(readr::read_csv, name = \"Reader\", input = \"file\", show_col_types = FALSE) |>   add_node(Splitter(), name = \"Splitter\", input = \"Reader\") |>   add_node(summarizer, name = \"Summarizer\", input = \"Splitter.output_1\") |>   add_node(subset_data, name = \"Subsetter\", input = \"Splitter.output_2\") |>   add_node(func1, name = \"Func1\", input = \"Subsetter\") |>   add_node(func2, name = \"Func2\", input = \"Func1\") |>   add_node(func3, name = \"Func3\", input = \"Func2\") |>   add_node(func4, name = \"Func4\", input = \"Func3\") |>   add_node(func5, name = \"Func5\", input = \"Func4\") |>   add_node(func6, name = \"Func6\", input = \"Summarizer\") draw(pipeline) result = run(pipeline, start = 'Subsetter', halt = \"Func3\", Splitter.output_2 = mtcars) print(result) #> ══ Pipeline [executed] ═════════════════════════════════════════════════════════ #> 10 node(s): #>  Reader <-- Input: file #>  #>  Splitter <-- Input: Reader #>  #>  Summarizer <-- Input: Splitter.output_1 #>  #>  Subsetter <-- Input: Splitter.output_2 #>  #>  Func1 <-- Input: Subsetter #>  #>  Func2 <-- Input: Func1 #>  #>  Func3 <-- Input: Func2 #>  #>  Func4 <-- Input: Func3 #>  #>  Func5 <-- Input: Func4 #>  #>  Func6 <-- Input: Summarizer #>  #>  #> 1 output(s): #>  Func3"},{"path":"https://mwhalen18.github.io/sewage/index.html","id":"conclusion","dir":"","previous_headings":"","what":"Conclusion","title":"A Light-Weight Data Pipelining Tool","text":"Using three components (Nodes, Splitters Joiners) can construct complex data pipelines run single call. leveraging start halt arguments can construct large complex data pipelines, can isolate components pipeline making data scripts modular easier maintain.","code":""},{"path":"https://mwhalen18.github.io/sewage/reference/Joiner.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a Joiner object — Joiner","title":"Initialize a Joiner object — Joiner","text":"Joiner takes objects joins according defined method single node.","code":""},{"path":"https://mwhalen18.github.io/sewage/reference/Joiner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a Joiner object — Joiner","text":"","code":"Joiner(method)"},{"path":"https://mwhalen18.github.io/sewage/reference/Joiner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a Joiner object — Joiner","text":"method function join incoming objects together","code":""},{"path":"https://mwhalen18.github.io/sewage/reference/Joiner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a Joiner object — Joiner","text":"sewage_joiner object","code":""},{"path":"https://mwhalen18.github.io/sewage/reference/Joiner.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Initialize a Joiner object — Joiner","text":"additional arguments passed method passed ... [add_node()]","code":""},{"path":"https://mwhalen18.github.io/sewage/reference/Joiner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a Joiner object — Joiner","text":"","code":"pipeline = Pipeline() |>     add_node(Joiner(method = rbind), name = \"Joiner\", input = c(\"file1\", \"file2\"))"},{"path":"https://mwhalen18.github.io/sewage/reference/Pipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a sewage Pipeline — Pipeline","title":"Initialize a sewage Pipeline — Pipeline","text":"Initialize sewage Pipeline","code":""},{"path":"https://mwhalen18.github.io/sewage/reference/Pipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a sewage Pipeline — Pipeline","text":"","code":"Pipeline()"},{"path":"https://mwhalen18.github.io/sewage/reference/Pipeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a sewage Pipeline — Pipeline","text":"sewage pipeline object","code":""},{"path":"https://mwhalen18.github.io/sewage/reference/Splitter.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a splitter object — Splitter","title":"Initialize a splitter object — Splitter","text":"Splitter takes exactly one input node     propogates input n output nodes.","code":""},{"path":"https://mwhalen18.github.io/sewage/reference/Splitter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a splitter object — Splitter","text":"","code":"Splitter(edges = 2)"},{"path":"https://mwhalen18.github.io/sewage/reference/Splitter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a splitter object — Splitter","text":"edges number outputs. Must greater 1","code":""},{"path":"https://mwhalen18.github.io/sewage/reference/Splitter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a splitter object — Splitter","text":"sewage_splitter object","code":""},{"path":"https://mwhalen18.github.io/sewage/reference/Splitter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize a splitter object — Splitter","text":"executing Splitter object, pipeline contains     n outputs named SplitterName_output{}.","code":""},{"path":"https://mwhalen18.github.io/sewage/reference/Splitter.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Initialize a splitter object — Splitter","text":"ouputs Splitter object accessed naming     convention {name}.output_{} name     specified name Splitter object. allows pass     split objects downstream nodes access pipeline     results.","code":""},{"path":"https://mwhalen18.github.io/sewage/reference/Splitter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a splitter object — Splitter","text":"","code":"pipeline = Pipeline() pipeline = pipeline |>     add_node(name = 'Splitter', component = Splitter(), input = 'file') result = run(pipeline, file = mtcars) pull_output(result, 'Splitter.output_1') #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 pull_output(result, 'Splitter.output_2') #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"},{"path":"https://mwhalen18.github.io/sewage/reference/add_node.html","id":null,"dir":"Reference","previous_headings":"","what":"add node to a sewage pipeline — add_node","title":"add node to a sewage pipeline — add_node","text":"add_node() place new node specified pipeline. executed sequentially pipeline executed using run()","code":""},{"path":"https://mwhalen18.github.io/sewage/reference/add_node.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add node to a sewage pipeline — add_node","text":"","code":"add_node(pipeline, component, name, input, ...)"},{"path":"https://mwhalen18.github.io/sewage/reference/add_node.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add node to a sewage pipeline — add_node","text":"pipeline initialized  sewage pipeline component function executed. Must valid function specification exported sewage object including Joiner Splitter name name give given component. used `input` parameter downstream nodes input node use input `component`. Inputs either (1) name existing node pipeline, (2) name(s) argument(s) first ndoe pipeline. names can whatever want, match arguments pass run() ... additional arguments passed `component` argument","code":""},{"path":"https://mwhalen18.github.io/sewage/reference/add_node.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add node to a sewage pipeline — add_node","text":"sewage_pipeline object","code":""},{"path":"https://mwhalen18.github.io/sewage/reference/add_node.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"add node to a sewage pipeline — add_node","text":"","code":"my_func = function(df) {     df %>%         head(15) } pipeline = Pipeline() pipeline = pipeline |>     add_node(name = 'processor', component = my_func, input = 'file')"},{"path":"https://mwhalen18.github.io/sewage/reference/draw.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize a pipeline — draw.sewage_pipeline","title":"Visualize a pipeline — draw.sewage_pipeline","text":"function draws DAG existing pipeline flow.     additional information see igraph::spec_viz","code":""},{"path":"https://mwhalen18.github.io/sewage/reference/draw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize a pipeline — draw.sewage_pipeline","text":"","code":"# S3 method for sewage_pipeline draw(pipeline, ...)  draw(pipeline, ...)"},{"path":"https://mwhalen18.github.io/sewage/reference/draw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize a pipeline — draw.sewage_pipeline","text":"pipeline instantiated pipeline object ... reserved future use","code":""},{"path":"https://mwhalen18.github.io/sewage/reference/draw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize a pipeline — draw.sewage_pipeline","text":"htmlwdget object","code":""},{"path":"https://mwhalen18.github.io/sewage/reference/print.sewage_pipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing Pipelines — print.sewage_pipeline","title":"Printing Pipelines — print.sewage_pipeline","text":"print sewage pipeline print nodes theis inputs pipeline.    pipeline executed, print show outputs available    [pull_output()]","code":""},{"path":"https://mwhalen18.github.io/sewage/reference/print.sewage_pipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing Pipelines — print.sewage_pipeline","text":"","code":"# S3 method for sewage_pipeline print(x, ...)"},{"path":"https://mwhalen18.github.io/sewage/reference/print.sewage_pipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Printing Pipelines — print.sewage_pipeline","text":"x [Pipeline()] object ... used","code":""},{"path":"https://mwhalen18.github.io/sewage/reference/print.sewage_pipeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Printing Pipelines — print.sewage_pipeline","text":"formatted sewage pipeline output","code":""},{"path":"https://mwhalen18.github.io/sewage/reference/print.sewage_pipeline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Printing Pipelines — print.sewage_pipeline","text":"","code":"pipeline = Pipeline() |>     add_node(component = head, name = \"Head\", input = \"file\") print(pipeline) #> ══ Pipeline ════════════════════════════════════════════════════════════════════ #> 1 node(s): #> \tHead <-- Input: file #>"},{"path":"https://mwhalen18.github.io/sewage/reference/pull_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract output components from a pipeline — pull_output","title":"Extract output components from a pipeline — pull_output","text":"Extract output components pipeline","code":""},{"path":"https://mwhalen18.github.io/sewage/reference/pull_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract output components from a pipeline — pull_output","text":"","code":"pull_output(x, component, ...)  # S3 method for sewage_pipeline pull_output(x, component, ...)"},{"path":"https://mwhalen18.github.io/sewage/reference/pull_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract output components from a pipeline — pull_output","text":"x executed pipeline object component character string specifying output component pull ... reserved future use","code":""},{"path":"https://mwhalen18.github.io/sewage/reference/pull_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract output components from a pipeline — pull_output","text":"output terminating node executed sewage pipeline","code":""},{"path":"https://mwhalen18.github.io/sewage/reference/pull_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract output components from a pipeline — pull_output","text":"","code":"pipeline = Pipeline() |>     add_node(component = head, name = \"Head\", input = 'file') result = run(pipeline, file = iris) pull_output(result, \"Head\") #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa"},{"path":"https://mwhalen18.github.io/sewage/reference/run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a pipeline — run","title":"Run a pipeline — run","text":"function extry point executing pipeline object","code":""},{"path":"https://mwhalen18.github.io/sewage/reference/run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a pipeline — run","text":"","code":"run(pipeline, start = NULL, halt = NULL, ...)"},{"path":"https://mwhalen18.github.io/sewage/reference/run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a pipeline — run","text":"pipeline initialized pipeline object start node start execution. NULL execution start first node halt halt execution specified node. Adding parameter halt execution remainder pipeline. Note pipelines executed sequentially order add pipeline, case branching pipeline, nodes different branch specified earlier pipeline still executed. ... parameter(s) pass starting node pipeline. match `input` parameter `add_node` starting node. case multiple inputs starting later point pipeline, argument match name starting node pipeline.","code":""},{"path":"https://mwhalen18.github.io/sewage/reference/run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a pipeline — run","text":"executed sewage_pipeline object","code":""},{"path":"https://mwhalen18.github.io/sewage/reference/run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a pipeline — run","text":"","code":"func1 = function(x) {     x } pipeline = Pipeline() |>     add_node(component = func1, name = \"Func1\", input = \"file\") |>     add_node(component = func1, name = \"Func2\", input = \"Func1\") |>     add_node(component = func1, name = \"Func3\", input = \"Func2\") run(pipeline, file = mtcars) #> ══ Pipeline [executed] ═════════════════════════════════════════════════════════ #> 3 node(s): #> \tFunc1 <-- Input: file #>  #> \tFunc2 <-- Input: Func1 #>  #> \tFunc3 <-- Input: Func2 #>  #>  #> 1 output(s): #> \tFunc3 #>  run(pipeline, start = \"Func2\", Func1 = iris) #> ══ Pipeline [executed] ═════════════════════════════════════════════════════════ #> 3 node(s): #> \tFunc1 <-- Input: file #>  #> \tFunc2 <-- Input: Func1 #>  #> \tFunc3 <-- Input: Func2 #>  #>  #> 1 output(s): #> \tFunc3 #>  run(pipeline, halt = \"Func2\", file = mtcars) #> ══ Pipeline [executed] ═════════════════════════════════════════════════════════ #> 3 node(s): #> \tFunc1 <-- Input: file #>  #> \tFunc2 <-- Input: Func1 #>  #> \tFunc3 <-- Input: Func2 #>  #>  #> 1 output(s): #> \tFunc2 #>"}]
